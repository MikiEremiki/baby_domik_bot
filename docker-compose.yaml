services:
  app:
    profiles: [ "bot", "all" ]
    container_name: baby_domik.bot
    build:
      context: .
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    develop:
      watch:
        - action: rebuild
          path: .
    networks:
      - baby_domik.postgres.network

  postgres:
    profiles: [ "all", "migration" ]
    container_name: baby_domik.postgres
    image: "postgres:16-alpine"
    hostname: user_service.postgres
    restart: always
    user: postgres
    volumes:
      - baby_domik.postgres.data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_USER: ${POSTGRES_USER:-$USER}
      POSTGRES_DB: ${POSTGRES_DB:-$USER}
    env_file:
      - config/.env
    expose:
      - 5432
    networks:
      - baby_domik.postgres.network
    healthcheck:
      test: [ "CMD", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 10s
      timeout: 5s
      retries: 5
  test:
    profiles: ["test"]
    container_name: baby_domik.test
    image: "mikieremiki/baby_domik_bot:latest"
    restart: no
    environment:
      CONFIG_PATH: '/app/config/'
    volumes:
      - ./config:/app/config:ro
      - ./src/settings/settings.py:/app/settings/settings.py
      - baby_domik.bot.data:/app/src/db/data
      - baby_domik.bot.logs:/app/src/log/archive
    develop:
      watch:
        - action: rebuild
          path: .

volumes:
  baby_domik.postgres.data: {}
  baby_domik.bot.data: {}
  baby_domik.bot.logs: {}

networks:
  baby_domik.postgres.network: {}