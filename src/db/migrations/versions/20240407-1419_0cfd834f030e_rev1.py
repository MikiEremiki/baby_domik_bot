"""rev1

Revision ID: 0cfd834f030e
Revises: 31c46999db1a
Create Date: 2024-04-07 14:19:18.160094

"""

from alembic import op
import sqlalchemy as sa

from db import BaseModel

# revision identifiers, used by Alembic.
revision = "0cfd834f030e"
down_revision = "31c46999db1a"
branch_labels = None
depends_on = None


GroupOfPeopleByDiscountTypeEnum = sa.Enum(
    "all",
    "privilege",
    "non_privilege",
    name="group_of_people_by_discount_type",
    metadata=BaseModel.metadata
)


def upgrade() -> None:
    GroupOfPeopleByDiscountTypeEnum.create(op.get_bind(), checkfirst=True)
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "promotions",
        sa.Column("id", sa.BIGINT(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("code", sa.String(), nullable=False),
        sa.Column("discount", sa.BIGINT(), nullable=False),
        sa.Column("start_date", sa.TIMESTAMP(timezone=True)),
        sa.Column("expire_date", sa.TIMESTAMP(timezone=True)),
        sa.Column("base_ticket_ids", sa.BIGINT()),
        sa.Column("type_event_ids", sa.BIGINT()),
        sa.Column("theater_event_ids", sa.BIGINT()),
        sa.Column("schedule_event_ids", sa.BIGINT()),
        sa.Column("for_who_discount",
                  GroupOfPeopleByDiscountTypeEnum, nullable=False),
        sa.Column("flag_active", sa.Boolean(), nullable=False),
        sa.Column("count_of_usage", sa.BIGINT(), nullable=False),
        sa.Column("max_count_of_usage", sa.BIGINT(), nullable=False),
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["base_ticket_ids"],
            ["base_tickets.base_ticket_id"],
            name=op.f("fk__promotions__base_ticket_ids__base_tickets"),
        ),
        sa.ForeignKeyConstraint(
            ["schedule_event_ids"],
            ["schedule_events.id"],
            name=op.f("fk__promotions__schedule_event_ids__schedule_events"),
        ),
        sa.ForeignKeyConstraint(
            ["theater_event_ids"],
            ["theater_events.id"],
            name=op.f("fk__promotions__theater_event_ids__theater_events"),
        ),
        sa.ForeignKeyConstraint(
            ["type_event_ids"],
            ["type_events.id"],
            name=op.f("fk__promotions__type_event_ids__type_events"),
        ),
        sa.PrimaryKeyConstraint("id", name=op.f("pk__promotions")),
        sa.UniqueConstraint("code", name=op.f("uq__promotions__code")),
    )
    op.alter_column(
        "children",
        "age",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        nullable=True,
    )
    op.add_column("tickets",
                  sa.Column("promo_id", sa.BIGINT(), nullable=True))
    op.create_foreign_key(
        op.f("fk__tickets__promo_id__promotions"),
        "tickets",
        "promotions",
        ["promo_id"],
        ["id"],
    )
    op.add_column(
        "users", sa.Column("agreement_received", sa.Date(), nullable=True)
    )
    op.add_column(
        "users", sa.Column("is_privilege", sa.Boolean(), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("users", "is_privilege")
    op.drop_column("users", "agreement_received")
    op.drop_constraint(
        op.f("fk__tickets__promo_id__promotions"),
        "tickets",
        type_="foreignkey",
    )
    op.drop_column("tickets", "promo_id")
    op.alter_column(
        "children",
        "age",
        existing_type=sa.DOUBLE_PRECISION(precision=53),
        nullable=False,
    )
    op.drop_table("promotions")
    GroupOfPeopleByDiscountTypeEnum.drop(op.get_bind(), checkfirst=True)
    # ### end Alembic commands ###
