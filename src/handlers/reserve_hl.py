import logging
import pprint
from datetime import datetime

from telegram.error import BadRequest
from telegram.ext import ContextTypes, ConversationHandler, TypeHandler
from telegram import (
    Update,
    InlineKeyboardMarkup,
    ReplyKeyboardRemove,
)
from telegram.constants import ChatType, ChatAction

from db import db_postgres
from db.db_postgres import get_schedule_theater_base_tickets
from db.enum import TicketStatus
from handlers import init_conv_hl_dialog, check_user_db
from handlers.email_hl import check_email_and_update_user
from handlers.sub_hl import (
    request_phone_number,
    send_breaf_message, send_filtered_schedule_events,
    send_message_about_list_waiting,
    remove_button_from_last_message,
    create_and_send_payment, processing_successful_payment,
    get_theater_and_schedule_events_by_month,
)
from db.db_googlesheets import (
    load_clients_data,
    decrease_free_and_increase_nonconfirm_seat,
)
from api.googlesheets import write_client_list_waiting, write_client_reserve
from utilities.utl_check import (
    check_available_seats, check_available_ticket_by_free_seat,
    check_entered_command, check_topic, check_input_text
)
from utilities.utl_func import (
    extract_phone_number_from_text, add_btn_back_and_cancel,
    set_back_context, check_phone_number,
    create_replay_markup_for_list_of_shows,
    get_full_name_event, render_text_for_choice_time,
    get_formatted_date_and_time_of_event,
    create_event_names_text, get_events_for_time_hl,
    get_type_event_ids_by_command, get_emoji, clean_context,
    add_clients_data_to_text, add_qty_visitors_to_text
)
from utilities.utl_kbd import (
    adjust_kbd,
    create_kbd_schedule_and_date, create_kbd_schedule,
    create_kbd_for_time_in_reserve, create_replay_markup,
    create_kbd_and_text_tickets_for_choice, create_kbd_for_time_in_studio
)
from settings.settings import (
    ADMIN_GROUP, COMMAND_DICT, SUPPORT_DATA, RESERVE_TIMEOUT
)
from utilities.utl_ticket import cancel_tickets

reserve_hl_logger = logging.getLogger('bot.reserve_hl')


async def choice_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤.

    –° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç state MONTH
    """
    query = update.callback_query
    if context.user_data.get('command', False) and query:
        state = context.user_data['STATE']
        await query.answer()
        await query.delete_message()
    else:
        state = await init_conv_hl_dialog(update, context)
        await check_user_db(update, context)

    if update.effective_message.is_topic_message:
        is_correct_topic = await check_topic(update, context)
        if not is_correct_topic:
            return ConversationHandler.END

    command = context.user_data['command']
    postfix_for_cancel = command
    context.user_data['postfix_for_cancel'] = postfix_for_cancel

    user = context.user_data.setdefault('user', update.effective_user)
    reserve_hl_logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—á–∞–ª –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞: {user}')

    type_event_ids = await get_type_event_ids_by_command(command)
    reply_markup, text = await send_filtered_schedule_events(update,
                                                             context,
                                                             type_event_ids)

    state = 'MONTH'
    set_back_context(context, state, text, reply_markup)
    context.user_data['STATE'] = state
    return state


async def choice_show_or_date(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ —Å–ø–µ–∫—Ç–∞–∫–ª–µ–π —Å –¥–∞—Ç–∞–º–∏.

    –° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç state DATE
    """
    query = update.callback_query
    await query.answer()
    await query.delete_message()

    number_of_month_str = query.data

    reserve_hl_logger.info(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –º–µ—Å—è—Ü: {number_of_month_str}')
    reserve_user_data = context.user_data['reserve_user_data']
    schedule_event_ids = reserve_user_data['schedule_event_ids']
    schedule_events = await db_postgres.get_schedule_events_by_ids(
        context.session, schedule_event_ids)

    enum_theater_events, schedule_events_filter_by_month = await (
        get_theater_and_schedule_events_by_month(context,
                                                 schedule_events,
                                                 number_of_month_str)
    )

    text_legend = (
        'üìç - –ü—Ä–µ–º—å–µ—Ä–∞\n'
        'üë∂üèº - –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç\n'
        '‚è≥ - –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n'
        '\n'
    )

    december = '12'
    if number_of_month_str == december:
        text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ\n</b>' + text_legend
        text = await create_event_names_text(enum_theater_events, text)

        # TODO –°–¥–µ–ª–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±–µ–∑ –¥–∞—Ç, —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ
        keyboard = await create_kbd_schedule(enum_theater_events)
        keyboard = adjust_kbd(keyboard, 5)
        keyboard.append(add_btn_back_and_cancel(
            postfix_for_cancel=context.user_data['postfix_for_cancel'],
            postfix_for_back='MONTH'
        ))
        reply_markup = InlineKeyboardMarkup(keyboard)

        state = 'SHOW'
        set_back_context(context, state, text, reply_markup)
    else:
        text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏ –¥–∞—Ç—É\n</b>' + text_legend
        text = await create_event_names_text(enum_theater_events, text)

        keyboard = await create_kbd_schedule_and_date(
            schedule_events_filter_by_month, enum_theater_events)
        reply_markup = await create_replay_markup(
            keyboard,
            postfix_for_cancel=context.user_data['postfix_for_cancel'],
            postfix_for_back='MONTH',
            size_row=2
        )

        if context.user_data['command'] == 'list_wait':
            state = 'LIST_WAIT'
        else:
            state = 'DATE'
        set_back_context(context, state, text, reply_markup)

    photo = (
        context.bot_data
        .get('afisha', {})
        .get(int(number_of_month_str), False)
    )
    if update.effective_chat.type == ChatType.PRIVATE and photo:
        await update.effective_chat.send_photo(
            photo=photo,
            caption=text,
            reply_markup=reply_markup,
        )
    else:
        await update.effective_chat.send_message(
            text=text,
            reply_markup=reply_markup,
            message_thread_id=update.callback_query.message.message_thread_id,
        )

    reserve_user_data['number_of_month_str'] = number_of_month_str

    context.user_data['STATE'] = state
    return state


async def choice_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–µ–∫—Ç–∞–∫–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã
    –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç

    –° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç state TIME
    """
    # TODO –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–æ–¥
    query = update.callback_query
    await query.answer()

    number_of_show = int(query.data)
    reserve_user_data = context.user_data['reserve_user_data']
    dict_of_date_show = reserve_user_data['dict_of_date_show']
    dict_of_name_show_flip = reserve_user_data['dict_of_name_show_flip']
    number_of_month_str = reserve_user_data['number_of_month_str']
    dict_of_shows = context.user_data['common_data']['dict_of_shows']
    name_of_show = dict_of_name_show_flip[number_of_show]

    reply_markup = create_replay_markup_for_list_of_shows(
        dict_of_date_show,
        ver=3,
        add_cancel_btn=True,
        postfix_for_cancel=context.user_data['postfix_for_cancel'],
        postfix_for_back='SHOW',
        number_of_month=number_of_month_str,
        number_of_show=number_of_show,
        dict_of_events_show=dict_of_shows
    )

    flag_gift = False
    flag_christmas_tree = False
    flag_santa = False

    for event in dict_of_shows.values():
        if name_of_show == event['name_show']:
            if event['flag_gift']:
                flag_gift = True
            if event['flag_christmas_tree']:
                flag_christmas_tree = True
            if event['flag_santa']:
                flag_santa = True

    text = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n'
            f'<b>{name_of_show}</b>\n'
            f'<i>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É</i>\n\n')
    if flag_gift:
        text += f'{SUPPORT_DATA['–ü–æ–¥–∞—Ä–æ–∫'][0]} - {SUPPORT_DATA['–ü–æ–¥–∞—Ä–æ–∫'][1]}\n'
    if flag_christmas_tree:
        text += f'{SUPPORT_DATA['–ï–ª–∫–∞'][0]} - {SUPPORT_DATA['–ï–ª–∫–∞'][1]}\n'
    if flag_santa:
        text += f'{SUPPORT_DATA['–î–µ–¥'][0]} - {SUPPORT_DATA['–î–µ–¥'][1]}\n'

    photo = (
        context.bot_data
        .get('afisha', {})
        .get(int(number_of_month_str), False)
    )
    if update.effective_chat.type == ChatType.PRIVATE and photo:
        await query.edit_message_caption(
            caption=text,
            reply_markup=reply_markup,
        )
    else:
        await query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
        )

    if context.user_data['command'] == 'list_wait':
        state = 'LIST_WAIT'
    else:
        state = 'DATE'
    set_back_context(context, state, text, reply_markup)
    context.user_data['STATE'] = state
    return state


async def choice_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–µ–∫—Ç–∞–∫–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã
    –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç

    –° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç state TIME
    """
    query = update.callback_query
    await query.answer()
    try:
        await query.delete_message()
    except BadRequest as e:
        if e.message == 'Message to delete not found':
            reserve_hl_logger.error('–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–∞–∂–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑')
        return

    schedule_events, theater_event = await get_events_for_time_hl(update,
                                                                  context)

    check_command_studio = check_entered_command(context, 'studio')

    if check_command_studio:
        keyboard = await create_kbd_for_time_in_studio(schedule_events)
    else:
        keyboard = await create_kbd_for_time_in_reserve(schedule_events)
    reply_markup = await create_replay_markup(
        keyboard,
        postfix_for_cancel=context.user_data['postfix_for_cancel'],
        postfix_for_back='DATE',
        size_row=1
    )

    text = await render_text_for_choice_time(theater_event, schedule_events)
    if update.effective_chat.id == ADMIN_GROUP:
        text += '–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è'
    else:
        text += ('<b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è</b>\n\n'
                 '<i>–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç —Å 0 –∫–æ–ª-–≤–æ–º –º–µ—Å—Ç '
                 '–¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è</i>\n\n'
                 '–ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç:\n')

        if check_command_studio:
            text += '‚¨áÔ∏è<i>–í—Ä–µ–º—è</i> | <i>–î–µ—Ç—Å–∫–∏—Ö</i>‚¨áÔ∏è'
        else:
            text += '‚¨áÔ∏è<i>–í—Ä–µ–º—è</i> | <i>–î–µ—Ç—Å–∫–∏—Ö</i> | <i>–í–∑—Ä–æ—Å–ª—ã—Ö</i>‚¨áÔ∏è'

    await update.effective_chat.send_message(
        text=text,
        reply_markup=reply_markup,
        message_thread_id=update.callback_query.message.message_thread_id
    )

    reserve_user_data = context.user_data['reserve_user_data']
    reserve_user_data['choose_theater_event_id'] = theater_event.id

    if context.user_data.get('command', False) == 'list':
        state = 'LIST'
    else:
        state = 'TIME'
    set_back_context(context, state, text, reply_markup)
    context.user_data['STATE'] = state
    return state


async def choice_option_of_reserve(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    """
    –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Å–ø–µ–∫—Ç–∞–∫–ª—é,
    –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    –° —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
    :return: –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç state ORDER
    """
    query = update.callback_query
    await query.answer()
    await query.edit_message_text('–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –ø–æ –±–∏–ª–µ—Ç–∞–º...')

    thread_id = update.effective_message.message_thread_id
    await update.effective_chat.send_action(ChatAction.TYPING,
                                            message_thread_id=thread_id)

    choice_event_id = int(query.data)

    reserve_user_data = context.user_data['reserve_user_data']
    reserve_user_data['choose_schedule_event_id'] = choice_event_id

    base_tickets, schedule_event, theater_event = await get_schedule_theater_base_tickets(
        context, choice_event_id)

    date_event, time_event = await get_formatted_date_and_time_of_event(
        schedule_event)
    full_name = get_full_name_event(theater_event.name,
                                    theater_event.flag_premier,
                                    theater_event.min_age_child,
                                    theater_event.max_age_child,
                                    theater_event.duration)

    text_emoji = await get_emoji(schedule_event)
    text_select_event = (f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ:\n'
                         f'<b>{full_name}\n'
                         f'{date_event}\n'
                         f'{time_event}</b>\n')
    text_select_event += f'{text_emoji}\n' if text_emoji else ''

    reserve_user_data['text_select_event'] = text_select_event

    check_command_reserve = check_entered_command(context, 'reserve')
    only_child = False
    text = (f'–ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: '
            f'<i>'
            f'{schedule_event.qty_adult_free_seat} –≤–∑—Ä'
            f' | '
            f'{schedule_event.qty_child_free_seat} –¥–µ—Ç'
            f'</i>\n')

    check_command_studio = check_entered_command(context, 'studio')
    if check_command_studio:
        only_child = True
        text = (f'–ö–æ–ª-–≤–æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç: '
                f'<i>'
                f'{schedule_event.qty_child_free_seat} –¥–µ—Ç'
                f'</i>\n')

    check_command = check_command_reserve or check_command_studio
    check_seats = check_available_seats(schedule_event, only_child=only_child)
    if check_command and not check_seats:
        await query.edit_message_text(
            '–ì–æ—Ç–æ–≤–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è...')
        await send_message_about_list_waiting(update, context)

        state = 'CHOOSING'
        context.user_data['STATE'] = state
        return state

    await query.edit_message_text('–§–æ—Ä–º–∏—Ä—É—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–ª–µ—Ç–æ–≤...')

    text = text_select_event + text
    text += '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n'

    base_tickets_filtered = []
    for i, ticket in enumerate(base_tickets):
        check_ticket = check_available_ticket_by_free_seat(schedule_event,
                                                           ticket,
                                                           only_child=only_child)
        if not ticket.flag_active or (check_command and not check_ticket):
            continue
        base_tickets_filtered.append(ticket)

    date_for_price = datetime.today()
    keyboard, text = await create_kbd_and_text_tickets_for_choice(
        context,
        text,
        base_tickets_filtered,
        schedule_event,
        theater_event,
        date_for_price
    )
    reply_markup = await create_replay_markup(
        keyboard,
        postfix_for_cancel=context.user_data['postfix_for_cancel'],
        postfix_for_back='TIME',
        size_row=5
    )

    text += ('__________\n'
             '<i>–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∏–ª–µ—Ç–æ–≤, '
             '—Ç–æ –∫–∞–∂–¥–∞—è –±—Ä–æ–Ω—å –æ—Ñ–æ—Ä–º–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.</i>\n'
             '__________\n'
             '<i>–ú–ù–û–ì–û–î–ï–¢–ù–´–ú:\n'
             '1. –ü—Ä–∏—à–ª–∏—Ç–µ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–µ–Ω–∏–µ –º–Ω–æ–≥–æ–¥–µ—Ç–Ω–æ–π —Å–µ–º—å–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n'
             '2. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞\n'
             '3. –û–ø–ª–∞—Ç–∏—Ç–µ –±–∏–ª–µ—Ç —Å–æ —Å–∫–∏–¥–∫–æ–π 10% –æ—Ç —Ü–µ–Ω—ã, –∫–æ—Ç–æ—Ä–∞—è —É–∫–∞–∑–∞–Ω–∞ –≤—ã—à–µ</i>')

    await query.edit_message_text(
        text=text,
        reply_markup=reply_markup
    )

    context.user_data['reserve_user_data']['date_for_price'] = date_for_price

    state = 'TICKET'
    set_back_context(context, state, text, reply_markup)
    context.user_data['STATE'] = state
    return state


async def get_email(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        await check_email_and_update_user(update, context)
    else:
        await query.answer()
        await query.delete_message()

    reserve_user_data = context.user_data['reserve_user_data']

    chose_base_ticket_id = reserve_user_data['chose_base_ticket_id']
    price = reserve_user_data['chose_price']
    text_select_event = reserve_user_data['text_select_event']

    chose_base_ticket = await db_postgres.get_base_ticket(
        context.session, chose_base_ticket_id)
    text = text_select_event + (f'–í–∞—Ä–∏–∞–Ω—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n'
                                f'{chose_base_ticket.name} '
                                f'{int(price)}—Ä—É–±\n')

    context.user_data['common_data']['text_for_notification_massage'] = text

    await update.effective_chat.send_message(text=text)
    message = await update.effective_chat.send_message(
        '–ü—Ä–æ–≤–µ—Ä—è—é –Ω–∞–ª–∏—á–∏–µ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç...')
    await update.effective_chat.send_action(ChatAction.TYPING)

    schedule_event_id = reserve_user_data['choose_schedule_event_id']
    schedule_event = await db_postgres.get_schedule_event(
        context.session, schedule_event_id)
    context.session.add(schedule_event)
    await context.session.refresh(schedule_event)

    check_command = check_entered_command(context, 'reserve')
    if check_command:
        only_child = False
    check_command = check_entered_command(context, 'studio')
    if check_command:
        only_child = True

    check_ticket = check_available_ticket_by_free_seat(schedule_event,
                                                       chose_base_ticket,
                                                       only_child=only_child)

    if check_command and not check_ticket:
        await message.delete()
        await send_message_about_list_waiting(update, context)

        state = 'CHOOSING'
        context.user_data['STATE'] = state
        return state

    reserve_hl_logger.info('–ü–æ–ª—É—á–µ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ')

    result = await decrease_free_and_increase_nonconfirm_seat(context,
                                                              schedule_event_id,
                                                              chose_base_ticket_id)

    if not result:
        state = 'TICKET'

        reserve_hl_logger.error(f'–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ')

        keyboard = [add_btn_back_and_cancel(
            postfix_for_cancel=context.user_data['postfix_for_cancel'],
            postfix_for_back='TIME')]
        reply_markup = InlineKeyboardMarkup(keyboard)

        text = ('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞\n'
                '–ù–∞–∂–º–∏—Ç–µ "–ù–∞–∑–∞–¥" –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –ø–æ–≤—Ç–æ—Ä–Ω–æ.\n'
                '–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n'
                f'{context.bot_data['admin']['contacts']}')
        await message.edit_text(
            text=text,
            reply_markup=reply_markup
        )
        context.user_data['STATE'] = state
        return state

    await message.delete()
    await send_breaf_message(update, context)

    # –ù—É–∂–Ω–æ –Ω–∞ —Å–ª—É—á–∞–π –æ—Ç–º–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    choose_schedule_event_ids = [schedule_event_id]
    reserve_user_data['choose_schedule_event_ids'] = choose_schedule_event_ids

    state = 'FORMA'
    context.user_data['STATE'] = state
    return state


async def get_name_adult(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    reserve_user_data = context.user_data['reserve_user_data']

    await context.bot.edit_message_reply_markup(
        update.effective_chat.id,
        message_id=reserve_user_data['message_id']
    )
    text = update.effective_message.text

    keyboard = [add_btn_back_and_cancel(
        postfix_for_cancel=context.user_data['postfix_for_cancel'] + '|',
        add_back_btn=False)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.effective_chat.send_message(
        text='<b>–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>',
        reply_markup=reply_markup
    )

    reserve_user_data['client_data']['name_adult'] = text
    reserve_user_data['message_id'] = message.message_id
    state = 'PHONE'
    context.user_data['STATE'] = state
    return state


async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    reserve_user_data = context.user_data['reserve_user_data']

    await context.bot.edit_message_reply_markup(
        update.effective_chat.id,
        message_id=reserve_user_data['message_id']
    )
    phone = update.effective_message.text
    phone = extract_phone_number_from_text(phone)
    if check_phone_number(phone):
        message = await request_phone_number(update, context)
        reserve_user_data['message_id'] = message.message_id
        return context.user_data['STATE']

    keyboard = [add_btn_back_and_cancel(
        postfix_for_cancel=context.user_data['postfix_for_cancel'] + '|',
        add_back_btn=False)]
    reply_markup = InlineKeyboardMarkup(keyboard)
    message = await update.effective_chat.send_message(
        text="""<b>–ù–∞–ø–∏—à–∏—Ç–µ, –∏–º—è –∏ —Å–∫–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã—Ö –ª–µ—Ç —Ä–µ–±–µ–Ω–∫—É</b>
__________
–ù–∞–ø—Ä–∏–º–µ—Ä:
–°–µ—Ä–≥–µ–π 2
–Æ–ª—è 3
__________
<i> - –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
 - –û–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
 - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, –∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö</i>""",
        reply_markup=reply_markup
    )

    context.user_data['reserve_user_data']['client_data']['phone'] = phone
    context.user_data['reserve_user_data']['message_id'] = message.message_id
    state = 'CHILDREN'
    context.user_data['STATE'] = state
    return state


async def get_name_children(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    reserve_user_data = context.user_data['reserve_user_data']

    await context.bot.edit_message_reply_markup(
        update.effective_chat.id,
        message_id=reserve_user_data['message_id']
    )
    await update.effective_chat.send_action(ChatAction.TYPING)

    text = update.effective_message.text
    wrong_input_data_text = (
        '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –¥–∞—Ç—É –∏–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä:\n'
        '–°–µ—Ä–≥–µ–π 2\n'
        '–Æ–ª—è 3\n'
        '__________\n'
        '<i> - –ï—Å–ª–∏ –¥–µ—Ç–µ–π –Ω–µ—Å–∫–æ–ª—å–∫–æ, –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Å–µ—Ö –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n'
        ' - –û–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫ = –æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞\n'
        ' - –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞ –∏ –ø—É–Ω–∫—Ç—É–∞—Ü–∏—é, '
        '–∫—Ä–æ–º–µ —Ç–µ—Ö, —á—Ç–æ —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö</i>'
    )
    keyboard = [add_btn_back_and_cancel(
        postfix_for_cancel=context.user_data['postfix_for_cancel'] + '|',
        add_back_btn=False)]
    reply_markup = InlineKeyboardMarkup(keyboard)

    result = await check_input_text(update.effective_message.text)
    if not result:
        keyboard = [add_btn_back_and_cancel(
            context.user_data['postfix_for_cancel'] + '|',
            add_back_btn=False)]
        reply_markup = InlineKeyboardMarkup(keyboard)
        message = await update.effective_chat.send_message(
            text=wrong_input_data_text,
            reply_markup=reply_markup,
        )
        reserve_user_data['message_id'] = message.message_id
        return context.user_data['STATE']
    reserve_hl_logger.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')

    processed_data_on_children = [item.split() for item in text.split('\n')]

    if not isinstance(processed_data_on_children[0], list):
        message = await update.effective_chat.send_message(
            text=f'–í—ã –≤–≤–µ–ª–∏:\n{text}' + wrong_input_data_text,
            reply_markup=reply_markup
        )
        reserve_user_data['message_id'] = message.message_id
        state = 'CHILDREN'
        context.user_data['STATE'] = state
        return state

    try:
        chose_base_ticket_id = reserve_user_data['chose_base_ticket_id']
        chose_base_ticket = await db_postgres.get_base_ticket(
            context.session, chose_base_ticket_id)
    except KeyError as e:
        reserve_hl_logger.error(e)
        await update.effective_chat.send_message(
            '–ü—Ä–æ–∏–∑–æ—à–µ–ª —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–±–æ–π.\n'
            f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑\n'
            f'/{COMMAND_DICT['RESERVE'][0]}\n'
            '–ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–µ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞.'
        )
        state = ConversationHandler.END
        context.user_data['STATE'] = state
        return state

    if len(processed_data_on_children) != chose_base_ticket.quality_of_children:
        message = await update.effective_chat.send_message(
            text=f'–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ: '
                 f'{len(processed_data_on_children)}\n'
                 f'–ö–æ–ª-–≤–æ –¥–µ—Ç–µ–π, —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –±–∏–ª–µ—Ç—É: '
                 f'{chose_base_ticket.quality_of_children}\n'
                 f'–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ –µ—â–µ —Ä–∞–∑, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–µ–±–µ–Ω–æ–∫ –Ω–∞ '
                 f'–æ—Ç–¥–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n–ò–≤–∞–Ω 1\n–ú–∞—Ä–∏–Ω–∞ 3',
            reply_markup=reply_markup
        )
        reserve_user_data['message_id'] = message.message_id
        state = 'CHILDREN'
        context.user_data['STATE'] = state
        return state

    reserve_user_data = context.user_data['reserve_user_data']
    client_data = reserve_user_data['client_data']
    client_data['data_children'] = processed_data_on_children
    reserve_user_data['original_input_text'] = update.effective_message.text

    user = context.user_data['user']
    reserve_hl_logger.info(": ".join(
        [
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            f'{user}',
            '–æ—Ç–ø—Ä–∞–≤–∏–ª:',
        ],
    ))
    reserve_hl_logger.info(client_data)

    command = context.user_data.get('command', False)
    if '_admin' in command:
        studio = context.bot_data['studio']
        schedule_event_id = reserve_user_data['choose_schedule_event_id']
        price = reserve_user_data['chose_price']
        choose_schedule_event_ids = [schedule_event_id]

        ticket_ids = []
        if chose_base_ticket.flag_season_ticket:
            for v in studio['–¢–µ–∞—Ç—Ä–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–Ω—Å–∏–≤']:
                if schedule_event_id in v:
                    choose_schedule_event_ids = v
        for event_id in choose_schedule_event_ids:
            ticket = await db_postgres.create_ticket(
                context.session,
                base_ticket_id=chose_base_ticket.base_ticket_id,
                price=price,
                schedule_event_id=event_id,
                status=TicketStatus.CREATED,
            )
            ticket_ids.append(ticket.id)

        reserve_user_data['ticket_ids'] = ticket_ids
        reserve_user_data['choose_schedule_event_ids'] = choose_schedule_event_ids

        people_ids = await db_postgres.create_people(context.session,
                                                     update.effective_user.id,
                                                     client_data)
        for ticket_id in ticket_ids:
            await db_postgres.attach_user_and_people_to_ticket(context.session,
                                                               ticket_id,
                                                               update.effective_user.id,
                                                               people_ids)
        write_client_reserve(context,
                             update.effective_chat.id,
                             chose_base_ticket,
                             TicketStatus.APPROVED.value)

        await processing_successful_payment(update, context)

        state = ConversationHandler.END
    else:
        await create_and_send_payment(update, context)
        state = 'PAID'
    context.user_data['STATE'] = state
    return state


async def forward_photo_or_file(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    await remove_button_from_last_message(update, context)

    await processing_successful_payment(update, context)

    state = ConversationHandler.END
    context.user_data['STATE'] = state
    return state


async def processing_successful_notification(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text('–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω')

    await processing_successful_payment(update, context)

    state = ConversationHandler.END
    context.user_data['STATE'] = state
    return state


async def conversation_timeout(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
) -> int:
    """Informs the user that the operation has timed out,
    calls :meth:`remove_reply_markup` and ends the conversation.
    :return:
        int: :attr:`telegram.ext.ConversationHandler.END`.
    """
    user = context.user_data['user']
    if context.user_data['STATE'] == 'PAID':
        reserve_hl_logger.info('–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ–∫–∞ –æ–± –æ–ø–ª–∞—Ç–µ –Ω–µ –±—ã–ª–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–∞')
        await context.bot.edit_message_reply_markup(
            chat_id=update.effective_chat.id,
            message_id=context.user_data['common_data']['message_id_buy_info']
        )
        await update.effective_chat.send_message(
            '–û—Ç –í–∞—Å –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞, –±—Ä–æ–Ω—å –æ—Ç–º–µ–Ω–µ–Ω–∞, '
            '–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å\n'
            '–ï—Å–ª–∏ –≤—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∏ –æ–ø–ª–∞—Ç—É, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ, '
            '–≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∏ –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–π —á–µ–∫\n'
            f'/{COMMAND_DICT['RESERVE'][0]}\n\n'
            '–ï—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç –Ω–µ –±—É–¥–µ—Ç —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n'
            f'{context.bot_data['admin']['contacts']}'
        )
        reserve_hl_logger.info(pprint.pformat(context.user_data))

    else:
        # TODO –ü—Ä–æ–ø–∏—Å–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É states, –¥–ª—è —ç—Ç–∞–ø–æ–≤ –æ–ø—Ä–æ—Å–∞
        await update.effective_chat.send_message(
            '–û—Ç –í–∞—Å –¥–æ–ª–≥–æ –Ω–µ –±—ã–ª–æ –æ—Ç–≤–µ—Ç–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å',
            message_thread_id=update.effective_message.message_thread_id
        )

    reserve_hl_logger.info(": ".join(
        [
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            f'{user}',
            f'AFK —É–∂–µ {RESERVE_TIMEOUT} –º–∏–Ω'
        ]
    ))
    reserve_hl_logger.info(
        f'–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–∞ —ç—Ç–∞–ø–µ {context.user_data['STATE']}')

    await cancel_tickets(update, context)

    await clean_context(context)

    return ConversationHandler.END


TIMEOUT_HANDLER = TypeHandler(Update, conversation_timeout)


async def send_clients_data(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    query = update.callback_query
    await query.answer()

    thread_id = update.effective_message.message_thread_id
    await update.effective_chat.send_action(ChatAction.TYPING,
                                            message_thread_id=thread_id)

    event_id = int(query.data)
    schedule_event = await db_postgres.get_schedule_event(
        context.session, event_id)
    theater_event = await db_postgres.get_theater_event(
        context.session, schedule_event.theater_event_id)

    full_name = get_full_name_event(theater_event.name,
                                    theater_event.flag_premier,
                                    theater_event.min_age_child,
                                    theater_event.max_age_child,
                                    theater_event.duration)
    date_event, time_event = await get_formatted_date_and_time_of_event(
        schedule_event)

    clients_data, name_column = load_clients_data(event_id)
    text = f'#–ü–æ–∫–∞–∑ #event_id_{event_id}\n'
    text += (f'–°–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –Ω–∞\n'
             f'{full_name}\n'
             f'{date_event}\n'
             f'{time_event}\n')

    text = await add_qty_visitors_to_text(text, name_column, clients_data)

    text += await add_clients_data_to_text(text, clients_data, name_column)

    await query.edit_message_text(text)

    state = ConversationHandler.END
    context.user_data['STATE'] = state
    return state


async def write_list_of_waiting(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    await update.effective_chat.send_message(
        text='–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞',
        reply_markup=ReplyKeyboardRemove()
    )
    state = 'PHONE_FOR_WAITING'
    context.user_data['STATE'] = state
    return state


async def get_phone_for_waiting(
        update: Update,
        context: ContextTypes.DEFAULT_TYPE
):
    reserve_user_data = context.user_data['reserve_user_data']

    phone = update.effective_message.text
    phone = extract_phone_number_from_text(phone)
    if check_phone_number(phone):
        message = await request_phone_number(update, context)
        reserve_user_data['message_id'] = message.message_id
        return context.user_data['STATE']

    reserve_user_data = context.user_data['reserve_user_data']
    reserve_user_data['client_data']['phone'] = phone
    text = reserve_user_data['text_select_event'] + '+7' + phone

    user = context.user_data['user']
    thread_id = (context.bot_data['dict_topics_name']
                 .get('–õ–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è', None))
    text = f'#–õ–∏—Å—Ç_–æ–∂–∏–¥–∞–Ω–∏—è\n' \
           f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} {user.full_name}\n' \
           f'–ó–∞–ø—Ä–æ—Å–∏–ª –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è\n' + text
    await context.bot.send_message(
        chat_id=ADMIN_GROUP,
        text=text,
        message_thread_id=thread_id
    )
    write_client_list_waiting(context)
    await update.effective_chat.send_message(
        text='–í—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—Å—Ç –æ–∂–∏–¥–∞–Ω–∏—è, '
             '–µ—Å–ª–∏ –º–µ—Å—Ç–æ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è, —Ç–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è. '
             '–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:\n'
             f'{context.bot_data['admin']['contacts']}'
    )

    state = ConversationHandler.END
    context.user_data['STATE'] = state
    return state
